---

- name: "MEDIUM | CNTR-K8-000150 | PATCH | The Kubernetes Controller Manager must use TLS 1.2, at a minimum, to protect the confidentiality of sensitive data during electronic dissemination."
  ansible.builtin.lineinfile:
      path: "{{ controller_manager_pod_specification_file }}"
      regexp: '^(\s+- --tls-min-version.*)$'
      line: "    - --tls-min-version={{ cntrk8stig_kube_controller_manager_tls }}"
      insertafter: '^\s+- kube-controller-manager$'
  when:
      - cntr_k8_000150
      - kubernetes_master
  tags:
      - CNTR-K8-000150
      - CAT2
      - CCI-000068
      - SRG-APP-000014-CTR-000035
      - SV-242376r712484_rule
      - V-242376
      - ssh
      - kube_control_manager

- name: "MEDIUM | CNTR-K8-000160 | PATCH | The Kubernetes Scheduler must use TLS 1.2, at a minimum, to protect the confidentiality of sensitive data during electronic dissemination."
  ansible.builtin.lineinfile:
      path: "{{ scheduler_pod_specification_file }}"
      regexp: '^(\s+- --tls-min-version.*)$'
      line: "    - --tls-min-version={{ cntrk8stig_kube_scheduler_manager_tls }}"
      insertafter: '^\s+- kube-scheduler'
  when:
      - cntr_k8_000160
      - kubernetes_master
  tags:
      - CNTR-K8-000160
      - CAT2
      - CCI-000068
      - SRG-APP-000014-CTR-000035
      - SV-242377r712487_rule
      - V-242377
      - kube_scheduler

- name: |
    "MEDIUM | CNTR-K8-000170 | PATCH | The Kubernetes API Server must use TLS 1.2, at a minimum, to protect the confidentiality of sensitive data during electronic dissemination."
    "MEDIUM | CNTR-K8-003350 | PATCH | The Kubernetes API Server must prohibit communication using TLS version 1.0 and 1.1, and SSL 2.0 and 3.0."
  ansible.builtin.lineinfile:
      path: "{{ api_server_pod_specification_file }}"
      regexp: '^(\s+- --tls-min-version.*)$'
      line: "    - --tls-min-version={{ cntrk8stig_kube_api_server_tls }}"
      insertafter: '^\s+- kube-apiserver'
  when:
      - cntr_k8_000170
      - kubernetes_master
  tags:
      - CNTR-K8-000170
      - CAT2
      - CCI-000068
      - CCI-001453
      - SRG-APP-000014-CTR-000040
      - SRG-APP-000560-CTR-001340
      - SV-242378r712490_rule
      - SV-242468r712760_rule
      - V-242378
      - V-242468
      - kube_api_server

- name: "MEDIUM | CNTR-K8-000180 | PATCH | The Kubernetes etcd must use TLS to protect the confidentiality of sensitive data during electronic dissemination."
  ansible.builtin.lineinfile:
      path: "{{ etcd_pod_specification_file }}"
      regexp: '^(\s+- --auto-tls=.*)$'
      line: "    - --auto-tls=false"
      insertafter: '^\s+- etcd'
  when:
      - cntr_k8_000180
      - kubernetes_master
  tags:
      - CNTR-K8-000180
      - CAT2
      - CCI-000068
      - SRG-APP-000014-CTR-000035
      - SV-242379r754799_rule
      - V-242379
      - kube_etcd

- name: "MEDIUM | CNTR-K8-000190 | PATCH | The Kubernetes etcd must use TLS to protect the confidentiality of sensitive data during electronic dissemination."
  ansible.builtin.lineinfile:
      path: "{{ etcd_pod_specification_file }}"
      regexp: '^(\s+- --peer-auto-tls=.*)$'
      line: "    - --peer-auto-tls=false"
      insertafter: '^\s+- etcd'
  when:
      - cntr_k8_000190
      - kubernetes_master
  tags:
      - CNTR-K8-000190
      - CAT2
      - CCI-000068
      - SRG-APP-000014-CTR-000035
      - SV-242380r754800_rule
      - V-242380
      - kube_etcd

- name: "MEDIUM | CNTR-K8-000270 | PATCH | The Kubernetes API Server must enable Node,RBAC as the authorization mode."
  ansible.builtin.lineinfile:
      path: "{{ api_server_pod_specification_file }}"
      regexp: '^(\s+- --authorization-mode.*)$'
      line: "    - --authorization-mode=Node,RBAC"
      insertafter: '^\s+- kube-apiserver'
  when:
      - cntr_k8_000270
      - kubernetes_master
  tags:
      - CNTR-K8-000270
      - CAT2
      - CCI-000213
      - SRG-APP-000033-CTR-000090
      - SV-242382r712502_rule
      - V-242382
      - kube_api_server

- name: "MEDIUM | CNTR-K8-000300 | PATCH | The Kubernetes Scheduler must have secure binding."
  ansible.builtin.lineinfile:
      path: "{{ scheduler_pod_specification_file }}"
      regexp: '^(\s+- --bind-address.*)$'
      line: "    - --bind-address=127.0.0.1"
      insertafter: '^\s+- kube-scheduler'
  when:
      - cntr_k8_000300
      - kubernetes_master
  tags:
      - CNTR-K8-000300
      - CAT2
      - CCI-000213
      - SRG-APP-000033-CTR-000090
      - SV-242384r712508_rule
      - V-242384
      - kube_scheduler

- name: "MEDIUM | CNTR-K8-000310 | PATCH | The Kubernetes Controller Manager must have secure binding."
  ansible.builtin.lineinfile:
      path: "{{ controller_manager_pod_specification_file }}"
      regexp: '^(\s+- --bind-address.*)$'
      line: "    - --bind-addressn=127.0.0.1"
      insertafter: '^\s+- kube-controller-manager$'
  when:
      - cntr_k8_000310
      - kubernetes_master
  tags:
      - CNTR-K8-000310
      - CAT2
      - CCI-000213
      - SRG-APP-000033-CTR-000090
      - SV-242385r712511_rule
      - V-242385
      - kube_control_manager

- name: "MEDIUM | CNTR-K8-000350 | PATCH | The Kubernetes API server must have the secure port set."
  ansible.builtin.lineinfile:
      path: "{{ api_server_pod_specification_file }}"
      regexp: '^(\s+- --secure-port.*)$'
      line: "    - --secure-port={{ cntrk8stig_kube_api_server_secure_port }}"
      insertafter: '^\s+- kube-apiserver'
  when:
      - cntr_k8_000350
      - kubernetes_master
  tags:
      - CNTR-K8-000350
      - CAT2
      - CCI-000213
      - SRG-APP-000033-CTR-000100
      - SV-242389r712523_rule
      - V-242389
      - kube_api_server

- name: |
      "MEDIUM | CNTR-K8-000400 | PATCH | Kubernetes Worker Nodes must not have sshd service running."
      "MEDIUM | CNTR-K8-000410 | PATCH | Kubernetes Worker Nodes must not have the sshd service enabled."
  ansible.builtin.systemd:
      name: sshd
      state: stopped
      enabled: false
  when:
      - kubernetes_master
      - "'sshd' in ansible_facts.packages"
      - cntr_k8_000400 or
        cntr_k8_000410
  tags:
      - CNTR-K8-000400
      - CNTR-K8-000410
      - CAT2
      - CCI-000213
      - SRG-APP-000033-CTR-000100
      - SRG-APP-000033-CTR-000095
      - SV-242389r712523_rule
      - SV-242394r717017_rule
      - V-242389
      - V-242394
      - sshd

- name: "MEDIUM | CNTR-K8-000420 | PATCH | Kubernetes dashboard must not be enabled."
  block:
      - name: "MEDIUM | CNTR-K8-000420 | PATCH | Kubernetes dashboard must not be enabled. | Get if dashboard available"
        ansible.builtin.shell: kubectl get pods --all-namespaces -l k8s-app=kubernetes-dashboard
        changed_when: false
        failed_when: false
        register: cntr_k8_000420_kube_dash_status

      - name: "MEDIUM | CNTR-K8-000420 | PATCH | Kubernetes dashboard must not be enabled. | Remove dashboard if exists"
        ansible.builtin.shell: kubectl delete deployment kubernetes-dashboard --namespace=kube-system
        changed_when: true
        when: cntr_k8_000420_kube_dash_status.stdout | length >=1
  when:
      - cntr_k8_000420
  tags:
      - CNTR-K8-000420
      - CAT2
      - CCI-000213
      - SRG-APP-000033-CTR-000095
      - SV-242395r712541_rule
      - V-242395
      - kube_dashboard

- name: "MEDIUM | CNTR-K8-000430 | PATCH | Kubernetes Kubectl cp command must give expected access and results."
  block:
      - name: "MEDIUM | CNTR-K8-000430 | PATCH | Kubernetes Kubectl cp command must give expected access and results. | Message out version"
        ansible.builtin.debug:
            msg:
                - "Warning!! Your version needs to be 1.12.9 or newer"
        when: cntrk8stig_kubectl_client_version.stdout is version('1.12.0', '<=')

      - name: "MEDIUM | CNTR-K8-000430 | PATCH | Kubernetes Kubectl cp command must give expected access and results. | Warning count"
        ansible.builtin.import_tasks: warning_facts.yml
        vars:
            warn_control_id: 'CNTR-K8-000430'
        when: cntrk8stig_kubectl_client_version.stdout is version('1.12.0', '<=')
  when:
      - cntr_k8_000430
  tags:
      - CNTR-K8-000430
      - CAT2
      - CCI-000213
      - SRG-APP-000033-CTR-000090
      - SV-242396r712544_rule
      - V-242396
      - kubectl

- name: "MEDIUM | CNTR-K8-000450 | PATCH | Kubernetes DynamicAuditing must not be enabled."
  block:
      - name: "MEDIUM | CNTR-K8-000450 | PATCH | Kubernetes DynamicAuditing must not be enabled. | Get feature-gates files"
        ansible.builtin.shell: grep -is feature-gates /etc/kubernetes/manifests/* /etc/sysconfig/kublet | cut -d":" -f1
        changed_when: false
        failed_when: false
        register: cntr_k8_000450_feature_gates_files

      - name: "MEDIUM | CNTR-K8-000450 | PATCH | Kubernetes DynamicAuditing must not be enabled. | Update DynamicAuditing"
        ansible.builtin.replace:
            path: "{{ item }}"
            regexp: 'DynamicAuditing=true'
            replace: "DynamicAuditing=false"
        with_items:
            - "{{ cntr_k8_000450_feature_gates_files.stdout_lines }}"
        when: cntr_k8_000450_feature_gates_files.stdout | length >=1
  when:
      - cntr_k8_000450
      - kubernetes_master
  tags:
      - CNTR-K8-000450
      - CAT2
      - CCI-000213
      - SRG-APP-000033-CTR-000100
      - SV-242398r717019_rule
      - V-242398
      - kube_api_server

- name: "MEDIUM | CNTR-K8-000450 | PATCH | Kubernetes DynamicAuditing must not be enabled."
  block:
      - name: "MEDIUM | CNTR-K8-000450 | AUDIT | Kubernetes DynamicAuditing must not be enabled. | Get feature-gates"
        ansible.builtin.shell: grep -is feature-gates /etc/kubernetes/manifests/* /etc/sysconfig/kublet
        changed_when: false
        failed_when: false
        register: cntr_k8_000450_feature_gates

      - name: "MEDIUM | CNTR-K8-000450 | AUDIT | Kubernetes DynamicAuditing must not be enabled | Split Get feature-gates values"
        ansible.builtin.set_fact:
            cntr_k8_000450_split_fg: "{{ cntr_k8_000450_feature_gates.stdout_lines | map('regex_replace', ld_passwd_regex, ld_passwd_yaml) | map('from_yaml') | list }}"
        vars:
            ld_passwd_regex: >-
                ^(?P<path>[^:]*):(?P<entry>[^:]*)
            ld_passwd_yaml: |
                path: >-4
                    \g<path>
                entry: >-4
                    \g<entry>
        when: cntr_k8_000450_feature_gates.stdout | length >= 1

      - name: "MEDIUM | CNTR-K8-000450 | PATCH | Kubernetes DynamicAuditing must not be enabled. | Update DynamicKubeletConfig"
        ansible.builtin.replace:
            path: "{{ item.path }}"
            regexp: 'DynamicKubeletConfig=true'
            replace: "DynamicKubeletConfig=false"
        notify: kubelet restart
        with_items:
            - "{{ cntr_k8_000450_split_fg }}"
        when:
            - cntr_k8_000450_feature_gates.stdout | length >= 1
            - "'DynamicKubeletConfig=true' in item.entry"

      - name: "MEDIUM | CNTR-K8-000460 | PATCH | Kubernetes DynamicKubeletConfig must not be enabled. | Add DynamicKubeletConfig"
        ansible.builtin.lineinfile:
            path: "{{ item.path }}"
            regexp: '^(\s+- --feature-gates=.*)$'
            line: "{{ item.entry }},DynamicKubeletConfig=false"
            insertafter: '^\s+- kube-apiserver'
        notify: kubelet restart
        with_items:
            - "{{ cntr_k8_000450_split_fg }}"
        loop_control:
            label: "{{ item.path }}"
        when:
            - cntr_k8_000450_feature_gates.stdout | length >= 1
            - "'DynamicKubeletConfig=' not in item.entry"
  when:
      - cntr_k8_000460
      - kubernetes_master
  tags:
      - CNTR-K8-000460
      - CAT2
      - CCI-000213
      - SRG-APP-000033-CTR-000095
      - SV-242399r717021_rule
      - V-242399
      - feature_gates

- name: "MEDIUM | CNTR-K8-000470 | PATCH | The Kubernetes API server must have Alpha APIs disabled."
  block:
      - name: "MEDIUM | CNTR-K8-000470 | AUDIT | The Kubernetes API server must have Alpha APIs disabled. | Get feature-gate paths and entries"
        ansible.builtin.shell: grep -is feature-gates /etc/kubernetes/manifests/*
        changed_when: false
        failed_when: false
        register: cntr_k8_000470_feature_gates

      - name: "MEDIUM | CNTR-K8-000470 | AUDIT | The Kubernetes API server must have Alpha APIs disabled. | Split Get feature-gates values"
        ansible.builtin.set_fact:
            cntr_k8_000470_split_fg: "{{ cntr_k8_000470_feature_gates.stdout_lines | map('regex_replace', split_000470_regex, split_000470_yaml) | map('from_yaml') | list }}"
        vars:
            split_000470_regex: >-
                ^(?P<path>[^:]*):(?P<entry>[^:]*)
            split_000470_yaml: |
                path: >-4
                    \g<path>
                entry: >-4
                    \g<entry>
        when: cntr_k8_000470_feature_gates.stdout | length >= 1

      - name: "MEDIUM | CNTR-K8-000470 | PATCH | The Kubernetes API server must have Alpha APIs disabled. | Update AllAlpha"
        ansible.builtin.replace:
            path: "{{ item.path }}"
            regexp: 'AllAlpha=true'
            replace: 'AllAlpha=false'
        notify: kubelet restart
        with_items:
            - "{{ cntr_k8_000470_split_fg }}"
        loop_control:
            label: "{{ item.path }}"
        when:
            - cntr_k8_000470_feature_gates.stdout | length >=1
            - "'AllAlpha=true' in item.entry"
  when:
      - cntr_k8_000470
      - kubernetes_master
  tags:
      - CNTR-K8-000470
      - CAT2
      - CCI-000213
      - SRG-APP-000033-CTR-000090
      - SV-242400r712556_rule
      - V-242400
      - feature_gates

- name: "MEDIUM | CNTR-K8-000600 | PATCH | The Kubernetes API Server must have an audit policy set."
  ansible.builtin.lineinfile:
      path: "{{ api_server_pod_specification_file }}"
      regexp: '^(\s+- --audit-policy-file.*)$'
      line: "    - --audit-policy-file={{ cntrk8stig_api_server_audit_policy_file }}"
      insertafter: '^\s+- kube-apiserver'
  when:
      - cntr_k8_000600
      - kubernetes_master
  tags:
      - CNTR-K8-000600
      - CAT2
      - CCI-001464
      - SRG-APP-000092-CTR-000165
      - SV-242401r712559_rule
      - V-242401
      - kube_api_server

- name: "MEDIUM | CNTR-K8-000610 | PATCH | The Kubernetes API Server must have an audit log path set."
  ansible.builtin.lineinfile:
      path: "{{ api_server_pod_specification_file }}"
      regexp: '^(\s+- --audit-log-path.*)$'
      line: "    - --audit-log-path={{ cntrk8stig_api_server_audit_log_path }}"
      insertafter: '^\s+- kube-apiserver'
  when:
      - cntr_k8_000610
      - kubernetes_master
  tags:
      - CNTR-K8-000610
      - CAT2
      - CCI-001464
      - SRG-APP-000092-CTR-000165
      - SV-242402r712562_rule
      - V-242402
      - kube_api_server

- name: "MEDIUM | CNTR-K8-000700 | PATCH | Kubernetes API Server must generate audit records that identify what type of event has occurred, identify the source of the event, contain the event results, identify any users, and identify any containers associated with the event."
  ansible.builtin.template:
      src: audit-policy.yaml.j2
      dest: "{{ cntrk8stig_api_server_audit_policy_file }}"
  when:
      - cntr_k8_000700
      - kubernetes_master
      - cntrk8stig_ansible_managed_audit_policy
  tags:
      - CNTR-K8-000700
      - CAT2
      - CCI-000018
      - CCI-000130
      - CCI-000131
      - CCI-000132
      - CCI-000133
      - CCI-000134
      - CCI-000135
      - CCI-000172
      - CCI-001403
      - CCI-001404
      - CCI-001487
      - CCI-001814
      - CCI-002234
      - SRG-APP-000026-CTR-000070
      - SV-242403r712565_rule
      - V-242403
      - kube_api_server

- name: "MEDIUM | CNTR-K8-000850 | PATCH | Kubernetes Kubelet must deny hostname override."
  ansible.builtin.lineinfile:
      path: /etc/sysconfig/kubelet
      regexp: '--hostname-override'
      state: absent
  notify: kubelet restart
  when:
      - cntr_k8_000850
      - "'/etc/sysconfig/kubelet' in kubelet_file"
  tags:
      - CNTR-K8-000850
      - CAT2
      - CCI-001499
      - SRG-APP-000133-CTR-000290
      - SV-242404r712568_rule
      - V-242404
      - kubelet_sysconfig

- name: |
    "MEDIUM | CNTR-K8-000860 | PATCH | The Kubernetes manifests must be owned by root."
    "MEDIUM | CNTR-K8-000900 | PATCH | The Kubernetes manifests must have least privileges."
  block:
      - name: |
          "MEDIUM | CNTR-K8-000860 | AUDIT | The Kubernetes manifests must be owned by root. | Get files"
          "MEDIUM | CNTR-K8-000900 | AUDIT | The Kubernetes manifests must have least privileges. | Get files"
        ansible.builtin.find:
            path: /etc/kubernetes/manifests/
            patterns: '*.yaml'
        register: cntr_k8_000860_files

      - name: |
          "MEDIUM | CNTR-K8-000860 | PATCH | The Kubernetes manifests must be owned by root. | Change permissions on files"
          "MEDIUM | CNTR-K8-000900 | PATCH | The Kubernetes manifests must have least privileges. | Change permissions on files"
        ansible.builtin.file:
            path: "{{ item.path }}"
            mode: "{{ cntr_k8_000900 | ternary('644',omit) }}"
            owner: "{{ cntr_k8_000860 | ternary('root',omit) }}"
            group: "{{ cntr_k8_000860 | ternary('root',omit) }}"
        with_items:
            - "{{ cntr_k8_000860_files.files }}"
        loop_control:
            label: "{{ item.path }}"
        when: cntr_k8_000860_files.matched >= 1
  when:
      - cntr_k8_000860 or
        cntr_k8_000900
      - kubernetes_master
  tags:
      - CNTR-K8-000860
      - CNTR-K8-000900
      - CAT2
      - CCI-001499
      - SRG-APP-000133-CTR-000295
      - SRG-APP-000133-CTR-000310
      - SV-242405r712571_rule
      - SV-242408r712580_rule
      - V-242405
      - V-242408
      - permissions

- name: |
    "MEDIUM | CNTR-K8-000880 | PATCH | The Kubernetes kubelet configuration file must be owned by root."
    "MEDIUM | CNTR-K8-000890 | PATCH | The Kubernetes kubelet configuration files must have file permissions set to 644 or more restrictive."
  block:
      - name: |
          "MEDIUM | CNTR-K8-000880 | AUDIT | The Kubernetes kubelet configuration file must be owned by root. | Get file status"
          "MEDIUM | CNTR-K8-000890 | AUDIT | The Kubernetes kubelet configuration files must have file permissions set to 644 or more restrictive. | Get file status"
        ansible.builtin.stat:
            path: /etc/sysconfig/kubelet
        register: cntr_k8_000880_kubelet_file_status

      - name: |
          "MEDIUM | CNTR-K8-000880 | PATCH | The Kubernetes kubelet configuration file must be owned by root. | Set group and owner"
          "MEDIUM | CNTR-K8-000890 | PATCH | The Kubernetes kubelet configuration files must have file permissions set to 644 or more restrictive. | Set permissions"
        ansible.builtin.file:
            path: /etc/sysconfig/kubelet
            mode: "{{ cntr_k8_000890 | ternary('644',omit) }}"
            owner: "{{ cntr_k8_000880 | ternary('root',omit) }}"
            group: "{{ cntr_k8_000880 | ternary('root',omit) }}"
        when: cntr_k8_000880_kubelet_file_status.stat.exists
  when:
      - cntr_k8_000880 or
        cntr_k8_000890
      - kubernetes_master
  tags:
      - CNTR-K8-000880
      - CNTR-K8-000890
      - CAT2
      - CCI-001499
      - SRG-APP-000133-CTR-000300
      - SRG-APP-000133-CTR-000305
      - SV-242406r712574_rule
      - SV-242407r799982_rule
      - V-242406
      - V-242407
      - permissions

- name: "MEDIUM | CNTR-K8-000910 | PATCH | Kubernetes Controller Manager must disable profiling."
  ansible.builtin.lineinfile:
      path: "{{ controller_manager_pod_specification_file }}"
      regexp: '^(\s+- --profiling.*)$'
      line: "    - --profiling=false"
      insertafter: '^\s+- kube-controller-manager$'
  when:
      - cntr_k8_000910
      - kubernetes_master
  tags:
      - CNTR-K8-000910
      - CAT2
      - CCI-000381
      - SRG-APP-000141-CTR-000315
      - SV-242409r712583_rule
      - V-242409
      - kube_control_manager

- name: "MEDIUM | CNTR-K8-000920 | AUDIT | The Kubernetes API Server must enforce ports, protocols, and services (PPS) that adhere to the Ports, Protocols, and Services Management Category Assurance List (PPSM CAL)"
  block:
      - name: "MEDIUM | CNTR-K8-000920 | AUDIT | The Kubernetes API Server must enforce ports, protocols, and services (PPS) that adhere to the Ports, Protocols, and Services Management Category Assurance List (PPSM CAL) | Get secure port"
        ansible.builtin.shell: grep -I -secure-port {{ scheduler_pod_specification_file }}
        changed_when: false
        failed_when: false
        register: cntr_k8_000920_secure_port

      - name: "MEDIUM | CNTR-K8-000920 | AUDIT | The Kubernetes API Server must enforce ports, protocols, and services (PPS) that adhere to the Ports, Protocols, and Services Management Category Assurance List (PPSM CAL) | Get etcd servers"
        ansible.builtin.shell: grep -I -etcd-servers {{ scheduler_pod_specification_file }}
        changed_when: false
        failed_when: false
        register: cntr_k8_000920_etcd_servers

      - name: "MEDIUM | CNTR-K8-000920 | AUDIT | The Kubernetes API Server must enforce ports, protocols, and services (PPS) that adhere to the Ports, Protocols, and Services Management Category Assurance List (PPSM CAL) | Get namespace"
        ansible.builtin.shell: kubectl describe services –all-namespace
        changed_when: false
        failed_when: false
        register: cntr_k8_000920_name_space

      - name: "MEDIUM | CNTR-K8-000920 | AUDIT | The Kubernetes API Server must enforce ports, protocols, and services (PPS) that adhere to the Ports, Protocols, and Services Management Category Assurance List (PPSM CAL) | Display ports, etcd servers, and name space"
        ansible.builtin.debug:
            msg:
                - "Warning!! Below are the secure port, etcd servers, and name spaces of the kube-api-server configuration"
                - To conform to STIG standards these need to conform to PPSM CAL standards"
                - "Your secure port(s):"
                - "{{ (cntr_k8_000920_secure_port.stdout | length >= 1) | ternary(cntr_k8_000920_secure_port.stdout_lines,'Not Configured') }}"
                - "Your etcd servers:"
                - "{{ (cntr_k8_000920_etcd_servers.stdout | length >= 1) | ternary(cntr_k8_000920_etcd_servers.stdout_lines,'Not Configured') }}"
                - "Your namespace:"
                - "{{ (cntr_k8_000920_name_space.stdout | length >= 1) | ternary(cntr_k8_000920_name_space.stdout_lines,'Not Configured') }}"

      - name: "MEDIUM | CNTR-K8-000920 | AUDIT | The Kubernetes API Server must enforce ports, protocols, and services (PPS) that adhere to the Ports, Protocols, and Services Management Category Assurance List (PPSM CAL) | Warn count"
        ansible.builtin.import_tasks: warning_facts.yml
        vars:
            warn_control_id: 'CNTR-K8-000920'
  when:
      - cntr_k8_000920
      - kubernetes_master
  tags:
      - CNTR-K8-000920
      - CAT2
      - CCI-000382
      - SRG-APP-000142-CTR-000325
      - SV-242410r808576_rule
      - V-242410
      - ppsm_cal

- name: "MEDIUM | CNTR-K8-000930 | AUDIT | The Kubernetes Scheduler must enforce ports, protocols, and services (PPS) that adhere to the Ports, Protocols, and Services Management Category Assurance List (PPSM CAL)."
  block:
      - name: "MEDIUM | CNTR-K8-000930 | AUDIT | The Kubernetes Scheduler must enforce ports, protocols, and services (PPS) that adhere to the Ports, Protocols, and Services Management Category Assurance List (PPSM CAL). | Get insecure ports"
        ansible.builtin.shell: grep -I -insecure-port {{ scheduler_pod_specification_file }}
        changed_when: false
        failed_when: false
        register: cntr_k8_000930_insecure_port

      - name: "MEDIUM | CNTR-K8-000930 | AUDIT | The Kubernetes Scheduler must enforce ports, protocols, and services (PPS) that adhere to the Ports, Protocols, and Services Management Category Assurance List (PPSM CAL). | Get secure ports"
        ansible.builtin.shell: grep -I -secure-port {{ scheduler_pod_specification_file }}
        changed_when: false
        failed_when: false
        register: cntr_k8_000930_secure_port

      - name: "MEDIUM | CNTR-K8-000930 | AUDIT | The Kubernetes Scheduler must enforce ports, protocols, and services (PPS) that adhere to the Ports, Protocols, and Services Management Category Assurance List (PPSM CAL). | Get namespaces"
        ansible.builtin.shell: kubectl describe services –all-namespace
        changed_when: false
        failed_when: false
        register: cntr_k8_000930_name_space

      - name: "MEDIUM | CNTR-K8-000930 | AUDIT | The Kubernetes Scheduler must enforce ports, protocols, and services (PPS) that adhere to the Ports, Protocols, and Services Management Category Assurance List (PPSM CAL). | Display ports and namespace"
        ansible.builtin.debug:
            msg:
                - "Warning!! Below are the ports and namespaces in the kube-schedule.yaml configuration"
                - "To conform to STIG standards these need to conform to PPSM CAL standards"
                - "Your insecure port(s):"
                - "{{ (cntr_k8_000930_insecure_port.stdout | length >= 1) | ternary(cntr_k8_000930_insecure_port.stdout_lines,'Not Configured') }}"
                - "Your secure port(s):"
                - "{{ (cntr_k8_000930_secure_port.stdout | length >= 1) | ternary(cntr_k8_000930_secure_port.stdout_lines,'Not Configured') }}"
                - "Your name space:"
                - "{{ (cntr_k8_000930_name_space.stdout | length >= 1) | ternary(cntr_k8_000930_name_space.stdout_lines,'Not Configured') }}"

      - name: "MEDIUM | CNTR-K8-000930 | AUDIT | The Kubernetes Scheduler must enforce ports, protocols, and services (PPS) that adhere to the Ports, Protocols, and Services Management Category Assurance List (PPSM CAL). | Warn count"
        ansible.builtin.import_tasks: warning_facts.yml
        vars:
            warn_control_id: 'CNTR-K8-000930'
  when:
      - cntr_k8_000930
      - kubernetes_master
  tags:
      - CNTR-K8-000930
      - CAT2
      - CCI-000382
      - SRG-APP-000142-CTR-000325
      - SV-242411r712589_rule
      - V-242411
      - ppsm_cal

- name: "MEDIUM | CNTR-K8-000940 | AUDIT | The Kubernetes Controllers must enforce ports, protocols, and services (PPS) that adhere to the Ports, Protocols, and Services Management Category Assurance List (PPSM CAL)."
  block:
      - name: "MEDIUM | CNTR-K8-000940 | AUDIT | The Kubernetes Controllers must enforce ports, protocols, and services (PPS) that adhere to the Ports, Protocols, and Services Management Category Assurance List (PPSM CAL). | Get secure ports"
        ansible.builtin.shell: grep -I -secure-port {{ controller_manager_pod_specification_file }}
        changed_when: false
        failed_when: false
        register: cntr_k8_000940_secure_port

      - name: "MEDIUM | CNTR-K8-000940 | AUDIT | The Kubernetes Controllers must enforce ports, protocols, and services (PPS) that adhere to the Ports, Protocols, and Services Management Category Assurance List (PPSM CAL). | Get namespaces"
        ansible.builtin.shell: kubectl describe services –all-namespace
        changed_when: false
        failed_when: false
        register: cntr_k8_000940_name_space

      - name: "MEDIUM | CNTR-K8-000940 | AUDIT | The Kubernetes Controllers must enforce ports, protocols, and services (PPS) that adhere to the Ports, Protocols, and Services Management Category Assurance List (PPSM CAL). | Display ports nad namespace"
        ansible.builtin.debug:
            msg:
                - "Warning!! Below are the ports and namespaces in the kube-controller-manager.yaml configuration"
                - "To conform to STIG standards these need to conform to PPSM CAL standards"
                - "Your secure port(s):"
                - "{{ (cntr_k8_000940_secure_port.stdout | length >= 1) | ternary(cntr_k8_000940_secure_port.stdout_lines,'Not Configured') }}"
                - "Your namespace:"

      - name: "MEDIUM | CNTR-K8-000940 | AUDIT | The Kubernetes Controllers must enforce ports, protocols, and services (PPS) that adhere to the Ports, Protocols, and Services Management Category Assurance List (PPSM CAL). | Warn count"
        ansible.builtin.import_tasks: warning_facts.yml
        vars:
            warn_control_id: 'CNTR-K8-000940'
  when:
      - cntr_k8_000940
      - kubernetes_master
  tags:
      - CNTR-K8-000940
      - CAT2
      - CCI-000382
      - SRG-APP-000142-CTR-000330
      - SV-242412r808578_rule
      - V-242412
      - ppsm_cal

- name: "MEDIUM | CNTR-K8-000950 | AUDIT | The Kubernetes etcd must enforce ports, protocols, and services (PPS) that adhere to the Ports, Protocols, and Services Management Category Assurance List (PPSM CAL)."
  block:
      - name: "MEDIUM | CNTR-K8-000950 | AUDIT | The Kubernetes etcd must enforce ports, protocols, and services (PPS) that adhere to the Ports, Protocols, and Services Management Category Assurance List (PPSM CAL). | Get etcd servers"
        ansible.builtin.shell: grep -I -etcd-servers {{ api_server_pod_specification_file }}
        changed_when: false
        failed_when: false
        register: cntr_k8_000950_etcd_servers

      - name: "MEDIUM | CNTR-K8-000950 | AUDIT | The Kubernetes etcd must enforce ports, protocols, and services (PPS) that adhere to the Ports, Protocols, and Services Management Category Assurance List (PPSM CAL). | Display etcd servers"
        ansible.builtin.debug:
            msg:
                - "Warning!! Below are the etcd servers in the kupe-apiserver.yaml configuration"
                - To conform to STIG standards these need to conform to PPSM CAL standards"
                - "Your etcd servers:"
                - "{{ (cntr_k8_000950_etcd_servers.stdout | length >=1) | ternary(cntr_k8_000950_etcd_servers.stdout_lines,'Not Configured') }}"

      - name: "MEDIUM | CNTR-K8-000950 | AUDIT | The Kubernetes etcd must enforce ports, protocols, and services (PPS) that adhere to the Ports, Protocols, and Services Management Category Assurance List (PPSM CAL). | Warn count"
        ansible.builtin.import_tasks: warning_facts.yml
        vars:
            warn_control_id: 'CNTR-K8-000940'
  when:
      - cntr_k8_000950
      - kubernetes_master
  tags:
      - CNTR-K8-000950
      - CAT2
      - CCI-000382
      - SRG-APP-000142-CTR-000325
      - SV-242413r712595_rule
      - V-242413
      - ppsm_cal

- name: "MEDIUM | CNTR-K8-000960 | AUDIT | The Kubernetes cluster must use non-privileged host ports for user pods."
  ansible.builtin.shell: /bin/true
  changed_when: false
  failed_when: false
  when:
      - cntr_k8_000960
      - kubernetes_master
  tags:
      - CNTR-K8-000960
      - CAT2
      - CCI-000382
      - SRG-APP-000142-CTR-000330
      - SV-242414r717030_rule
      - V-242414
      - namespace
      - not_implemented

- name: "MEDIUM | CNTR-K8-001360 | AUDIT | Kubernetes must separate user functionality."
  ansible.builtin.shell: /bin/true
  changed_when: false
  failed_when: false
  when:
      - cntr_k8_001360
      - kubernetes_master
  tags:
      - CNTR-K8-001360
      - CAT2
      - CCI-001082
      - SRG-APP-000211-CTR-000530
      - SV-242417r712607_rule
      - V-242417
      - namespace
      - not_implemented

- name: "MEDIUM | CNTR-K8-001400 | PATCH | The Kubernetes API server must use approved cipher suites."
  ansible.builtin.lineinfile:
      path: "{{ api_server_pod_specification_file }}"
      regexp: '^(\s+- --tls-cipher-suites=.*)$'
      line: "    - --tls-cipher-suites={{ cntrk8stig_kubeapi_tls_cipher_suites }}"
      insertafter: '^\s+- kube-apiserver$'
  when:
      - cntr_k8_001400
      - kubernetes_master
  tags:
      - CNTR-K8-001400
      - CAT2
      - CCI-001184
      - SRG-APP-000219-CTR-000550
      - SV-242418r799985_rule
      - V-242418
      - kube_api_server
      - cyphers

- name: "MEDIUM | CNTR-K8-001410 | PATCH | Kubernetes API Server must have the SSL Certificate Authority set."
  ansible.builtin.lineinfile:
      path: "{{ api_server_pod_specification_file }}"
      regexp: '^(\s+- --client-ca-file=.*)$'
      line: "    - --client-ca-file={{ cntrk8stig_kubeapi_client_ca_file }}"
      insertafter: '^\s+- kube-apiserver$'
  notify: kubelet restart
  when:
      - cntr_k8_001410
      - kubernetes_master
  tags:
      - CNTR-K8-001410
      - CAT2
      - CCI-001184
      - SRG-APP-000219-CTR-000550
      - SV-242419r712613_rule
      - V-242419
      - kube_api_server
      - certificates

- name: "MEDIUM | CNTR-K8-001420 | PATCH | Kubernetes Kubelet must have the SSL Certificate Authority set."
  ansible.builtin.shell: /bin/true
  changed_when: false
  failed_when: false
  when:
      - cntr_k8_001420
      - kubernetes_master
  tags:
      - CNTR-K8-001420
      - CAT2
      - CCI-001184
      - SRG-APP-000219-CTR-000550
      - SV-242420r799987_rule
      - V-242420
      - kubelet
      - not_implemented

- name: "MEDIUM | CNTR-K8-001430 | PATCH | Kubernetes Controller Manager must have the SSL Certificate Authority set."
  ansible.builtin.lineinfile:
      path: "{{ api_server_pod_specification_file }}"
      regexp: '^(\s+- --root-ca-file=.*)$'
      line: "    - --root-ca-file={{ cntrk8stig_kubeapi_root_ca_file }}"
      insertafter: '^\s+- kube-apiserver'
  notify: kubelet restart
  when:
      - cntr_k8_001430
      - kubernetes_master
  tags:
      - CNTR-K8-001430
      - CAT2
      - CCI-001184
      - SRG-APP-000219-CTR-000550
      - SV-242421r717033_rule
      - V-242421
      - kube_control_manager

- name: "MEDIUM | CNTR-K8-001440 | PATCH |  Kubernetes API Server must have a certificate for communication."
  ansible.builtin.lineinfile:
      path: "{{ api_server_pod_specification_file }}"
      regexp: "{{ item.regexp }}"
      line: "{{ item.line }}"
      insertafter: '^\s+- kube-apiserver'
  with_items:
      - { regexp: '^(\s+- --tls-cert-file=.*)$', line: "    - --tls-cert-file={{ cntrk8stig_tls_cert_file }}" }
      - { regexp: '^(\s+- --tls-private-key-file=.*)$', line: "    - --tls-private-key-file={{ cntrk8stig_tls_privkey_file }}" }
  loop_control:
      label: "{{ item.line }}"
  when:
      - cntr_k8_001440
      - kubernetes_master
  tags:
      - CNTR-K8-001440
      - CAT2
      - CCI-001184
      - SRG-APP-000219-CTR-000550
      - SV-242422r712622_rule
      - V-242422
      - kube_api_server

- name: "MEDIUM | CNTR-K8-001450 | PATCH | Kubernetes etcd must enable client authentication to secure service."
  ansible.builtin.lineinfile:
      path: "{{ etcd_pod_specification_file }}"
      regexp: '^(\s+- --client-cert-auth=.*)$'
      line: "    - --client-cert-auth=true"
      insertafter: '^\s+- etcd'
  when:
      - cntr_k8_001450
      - kubernetes_master
  tags:
      - CNTR-K8-001450
      - CAT2
      - CCI-001184
      - SRG-APP-000219-CTR-000550
      - SV-242423r808580_rule
      - V-242423
      - kube_etcd

- name: "MEDIUM | CNTR-K8-001460 | PATCH | Kubernetes Kubelet must enable tls-private-key-file for client authentication to secure service."
  block:
      - name: "MEDIUM | CNTR-K8-001460 | PATCH | Kubernetes Kubelet must enable tls-private-key-file for client authentication to secure service. | Set if both EXRA_ARGS and streaming connection exist"
        ansible.builtin.replace:
            path: "{{ kubelet_file }}"
            regexp: 'tls-private-key-file=([\S])([^"])'
            replace: tls-private-key-file={{ cntrk8stig_tls_privkey_file }}
        notify: kubelet restart
        when:
            - "'KUBELET_EXTRA_ARGS' in cntrk8stig_kubelet_extra_args"
            - "'tls-private-key-file' in cntrk8stig_kubelet_extra_args"

      - name: "MEDIUM | CNTR-K8-001460 | PATCH | Kubernetes Kubelet must enable tls-private-key-file for client authentication to secure service. | Set if EXRA_ARGS exist and not streaming connection"
        ansible.builtin.replace:
            path: "{{ kubelet_file }}"
            regexp: 'KUBELET_EXTRA_ARGS='
            replace: 'KUBELET_EXTRA_ARGS=--tls-private-key-file={{ cntrk8stig_tls_privkey_file }} '
        notify: kubelet restart
        when:
            - "'KUBELET_EXTRA_ARGS' in cntrk8stig_kubelet_extra_args"
            - "'tls-private-key-file' not in cntrk8stig_kubelet_extra_args"

      - name: "MEDIUM | CNTR-K8-001460 | PATCH | Kubernetes Kubelet must enable tls-private-key-file for client authentication to secure service. | Set if EXRA_ARGS don't exist for non-systemd configs"
        ansible.builtin.lineinfile:
            path: "{{ kubelet_file }}"
            line: 'KUBELET_EXTRA_ARGS=--tls-private-key-file={{ cntrk8stig_tls_privkey_file }}'
        notify: kubelet restart
        when:
            - "'KUBELET_EXTRA_ARGS' not in cntrk8stig_kubelet_extra_args"
            - "'/etc/systemd/system/kubelet.service.d' not in kubelet_file"

      - name: "MEDIUM | CNTR-K8-001460 | PATCH | Kubernetes Kubelet must enable tls-private-key-file for client authentication to secure service. | Set if EXRA_ARGS don't exist for systemd configs"
        ansible.builtin.lineinfile:
            path: "{{ kubelet_file }}"
            line: 'Environment="KUBELET_EXTRA_ARGS=--tls-private-key-file={{ cntrk8stig_tls_privkey_file }}"'
            insertafter: '\[Service\]'
        notify: kubelet restart
        when:
            - "'KUBELET_EXTRA_ARGS' not in cntrk8stig_kubelet_extra_args"
            - "'/etc/systemd/system/kubelet.service.d' in kubelet_file"
  when:
      - cntr_k8_001460
      - kubernetes_master
  tags:
      - CNTR-K8-001460
      - CAT2
      - CCI-001184
      - SRG-APP-000219-CTR-000550
      - SV-242424r825890_rule
      - V-242424
      - kubelet

- name: "MEDIUM | CNTR-K8-001470 | PATCH | Kubernetes Kubelet must enable tls-cert-file for client authentication to secure service."
  block:
      - name: "MEDIUM | CNTR-K8-001470 | PATCH | Kubernetes Kubelet must enable tls-cert-file for client authentication to secure service. | Set if both EXRA_ARGS and streaming connection exist"
        ansible.builtin.replace:
            path: "{{ kubelet_file }}"
            regexp: 'tls-cert-file=([\S])([^"])'
            replace: tls-cert-file={{ cntrk8stig_tls_cert_file }}
        notify: kubelet restart
        when:
            - "'KUBELET_EXTRA_ARGS' in cntrk8stig_kubelet_extra_args"
            - "'tls-cert-file' in cntrk8stig_kubelet_extra_args"

      - name: "MEDIUM | CNTR-K8-001470 | PATCH | Kubernetes Kubelet must enable tls-cert-file for client authentication to secure service. | Set if EXRA_ARGS exist and not streaming connection"
        ansible.builtin.replace:
            path: "{{ kubelet_file }}"
            regexp: 'KUBELET_EXTRA_ARGS='
            replace: 'KUBELET_EXTRA_ARGS=--tls-cert-file={{ cntrk8stig_tls_cert_file }} '
        notify: kubelet restart
        when:
            - "'KUBELET_EXTRA_ARGS' in cntrk8stig_kubelet_extra_args"
            - "'tls-cert-file' not in cntrk8stig_kubelet_extra_args"

      - name: "MEDIUM | CNTR-K8-001470 | PATCH | Kubernetes Kubelet must enable tls-cert-file for client authentication to secure service. | Set if EXRA_ARGS don't exist for non-systemd configs"
        ansible.builtin.lineinfile:
            path: "{{ kubelet_file }}"
            line: 'KUBELET_EXTRA_ARGS=--tls-cert-file={{ cntrk8stig_tls_cert_file }}'
        notify: kubelet restart
        when:
            - "'KUBELET_EXTRA_ARGS' not in cntrk8stig_kubelet_extra_args"
            - "'/etc/systemd/system/kubelet.service.d' not in kubelet_file"

      - name: "MEDIUM | CNTR-K8-001470 | PATCH | Kubernetes Kubelet must enable tls-cert-file for client authentication to secure service. | Set if EXRA_ARGS don't exist for systemd configs"
        ansible.builtin.lineinfile:
            path: "{{ kubelet_file }}"
            line: 'Environment="KUBELET_EXTRA_ARGS=--tls-cert-file={{ cntrk8stig_tls_cert_file }}"'
            insertafter: '\[Service\]'
        notify: kubelet restart
        when:
            - "'KUBELET_EXTRA_ARGS' not in cntrk8stig_kubelet_extra_args"
            - "'/etc/systemd/system/kubelet.service.d' in kubelet_file"
  when:
      - cntr_k8_001470
      - kubernetes_master
  tags:
      - CNTR-K8-001470
      - CAT2
      - CCI-001184
      - SRG-APP-000219-CTR-000550
      - SV-242425r825892_rule
      - V-242425
      - kubelet

- name: "MEDIUM | CNTR-K8-001480 | PATCH | Kubernetes etcd must enable client authentication to secure service."
  ansible.builtin.lineinfile:
      path: "{{ etcd_pod_specification_file }}"
      regexp: '^(\s+- --peer-client-cert-auth=.*)$'
      line: "    - --peer-client-cert-auth=true"
      insertafter: '^\s+- etcd'
  when:
      - cntr_k8_001480
      - kubernetes_master
  tags:
      - CNTR-K8-001480
      - CAT2
      - CCI-001184
      - SRG-APP-000219-CTR-000550
      - SV-242426r821607_rule
      - V-242426
      - kube_etcd

- name: "MEDIUM | CNTR-K8-001490 | PATCH | Kubernetes etcd must have a key file for secure communication."
  ansible.builtin.lineinfile:
      path: "{{ etcd_pod_specification_file }}"
      regexp: '^(\s+- --key-file=.*)$'
      line: "    - --key-file={{ cntrk8stig_tls_privkey_file }}"
      insertafter: '^\s+- etcd'
  when:
      - cntr_k8_001490
      - kubernetes_master
  tags:
      - CNTR-K8-001490
      - CAT2
      - CCI-001184
      - SRG-APP-000219-CTR-000550
      - SV-242427r808583_rule
      - V-242427
      - kube_etcd

- name: "MEDIUM | CNTR-K8-001500 | PATCH | Kubernetes etcd must have a certificate for communication."
  ansible.builtin.lineinfile:
      path: "{{ etcd_pod_specification_file }}"
      regexp: '^(\s+- --cert-file=.*)$'
      line: "    - --cert-file={{ cntrk8stig_tls_cert_file }}"
      insertafter: '^\s+- etcd'
  when:
      - cntr_k8_001500
      - kubernetes_master
  tags:
      - CNTR-K8-001500
      - CAT2
      - CCI-001184
      - SRG-APP-000219-CTR-000550
      - SV-242428r808586_rule
      - V-242428
      - kube_etcd
      - not_implemented_yet

- name: "MEDIUM | CNTR-K8-001510 | PATCH | Kubernetes etcd must have the SSL Certificate Authority set."
  ansible.builtin.lineinfile:
      path: "{{ api_server_pod_specification_file }}"
      regexp: '^(\s+- --etcd-cafile=.*)$'
      line: "    - --etcd-cafile={{ cntrk8stig_etcd_catfile }}"
      insertafter: '^\s+- kube-apiserver'
  when:
      - cntr_k8_001510
      - kubernetes_master
  tags:
      - CNTR-K8-001510
      - CAT2
      - CCI-001184
      - SRG-APP-000219-CTR-000550
      - SV-242429r808589_rule
      - V-242429
      - kube_api_server

- name: "MEDIUM | CNTR-K8-001520 | PATCH | Kubernetes etcd must have a certificate for communication."
  ansible.builtin.lineinfile:
      path: "{{ api_server_pod_specification_file }}"
      regexp: '^(\s+- --etcd-certfile=.*)$'
      line: "    - --etcd-certfile={{ cntrk8stig_etcd_certfile }}"
      insertafter: '^\s+- kube-apiserver'
  when:
      - cntr_k8_001520
      - kubernetes_master
  tags:
      - CNTR-K8-001520
      - CAT2
      - CCI-001184
      - SRG-APP-000219-CTR-000550
      - SV-242430r808592_rule
      - V-242430
      - kube_api_server

- name: "MEDIUM | CNTR-K8-001530 | PATCH | Kubernetes etcd must have a key file for secure communication."
  ansible.builtin.lineinfile:
      path: "{{ api_server_pod_specification_file }}"
      regexp: '^(\s+- --etcd-keyfile=.*)$'
      line: "    - --etcd-keyfile={{ cntrk8stig_etcd_keyfile }}"
      insertafter: '^\s+- kube-apiserver'
  when:
      - cntr_k8_001530
      - kubernetes_master
  tags:
      - CNTR-K8-001530
      - CAT2
      - CCI-001184
      - SRG-APP-000219-CTR-000550
      - SV-242431r808595_rule
      - V-242431
      - kube_api_server

- name: "MEDIUM | CNTR-K8-001540 | PATCH | Kubernetes etcd must have peer-cert-file set for secure communication."
  ansible.builtin.lineinfile:
      path: "{{ etcd_pod_specification_file }}"
      regexp: '^(\s+- --peer-cert-file=.*)$'
      line: "    - --peer-cert-file={{ cntrk8stig_etcd_peercert_file }}"
      insertafter: '^\s+- etcd'
  when:
      - cntr_k8_001540
      - kubernetes_master
  tags:
      - CNTR-K8-001540
      - CAT2
      - CCI-001184
      - SRG-APP-000219-CTR-000550
      - SV-242432r808597_rule
      - V-242432
      - kube_etcd

- name: "MEDIUM | CNTR-K8-001550 | PATCH | Kubernetes etcd must have a peer-key-file set for secure communication."
  ansible.builtin.lineinfile:
      path: "{{ etcd_pod_specification_file }}"
      regexp: '^(\s+- --peer-key-file=.*)$'
      line: "    - --peer-key-file={{ cntrk8stig_etcd_peerkey_file }}"
      insertafter: '^\s+- etcd'
  when:
      - cntr_k8_001550
      - kubernetes_master
  tags:
      - CNTR-K8-001550
      - CAT2
      - CCI-001184
      - SRG-APP-000219-CTR-000550
      - SV-242433r808599_rule
      - V-242433
      - kube_etcd

- name: "MEDIUM | CNTR-K8-002600 | PATCH | Kubernetes API Server must configure timeouts to limit attack surface."
  ansible.builtin.lineinfile:
      path: "{{ api_server_pod_specification_file }}"
      regexp: '^(\s+- --request-timeout=.*)$'
      line: "    - --request-timeoute={{ cntrk8stig_api_request_timeout }}"
      insertafter: '^\s+- kube-apiserver'
  when:
      - cntr_k8_002600
      - kubernetes_master
  tags:
      - CNTR-K8-002600
      - CAT2
      - CCI-002385
      - SRG-APP-000435-CTR-001070
      - SV-242438r754802_rule
      - V-242438
      - kube_api_server


- name: "MEDIUM | CNTR-K8-002700 | PATCH | Kubernetes must remove old components after updated versions have been installed."
  ansible.builtin.shell: /bin/true
  changed_when: false
  failed_when: false
  when:
      - cntr_k8_002700
      - kubernetes_master
  tags:
      - CNTR-K8-002700
      - CAT2
      - CCI-002617
      - SRG-APP-000454-CTR-001110
      - SV-242442r712682_rule
      - V-242442
      - kube_ctl
      - not_implemented_yet

- name: "MEDIUM | CNTR-K8-002720 | AUDIT | Kubernetes must contain the latest updates as authorized by IAVMs, CTOs, DTMs, and STIGs."
  block:
      - name: "MEDIUM | CNTR-K8-002720 | AUDIT | Kubernetes must contain the latest updates as authorized by IAVMs, CTOs, DTMs, and STIGs. | Warn on bad version"
        ansible.builtin.debug:
            msg:
                - "Warning!! Please make sure you are on version 1.16.7 or newer"
        when: cntrk8stig_kubectl_client_version.stdout is version('1.16.7', '<=')

      - name: "MEDIUM | CNTR-K8-002720 | AUDIT | Kubernetes must contain the latest updates as authorized by IAVMs, CTOs, DTMs, and STIGs. | Warn count"
        ansible.builtin.import_tasks: warning_facts.yml
        vars:
            warn_control_id: 'CNTR-K8-002720'
        when: cntrk8stig_kubectl_client_version.stdout is version('1.16.7', '<=')
  when:
      - cntr_k8_002720
  tags:
      - CNTR-K8-002720
      - CAT2
      - CCI-002605
      - SRG-APP-000456-CTR-001125
      - SV-242443r712685_rule
      - V-242443

- name: "MEDIUM | CNTR-K8-003110 | PATCH | The Kubernetes component manifests must be owned by root."
  block:
      - name: "MEDIUM | CNTR-K8-003110 | AUDIT | The Kubernetes component manifests must be owned by root. | Find manifest files"
        ansible.builtin.find:
            path: "/etc/kubernetes/manifests"
            patterns: "*.yaml"
        register: cntr_k8_003110_manifest_files

      - name: "MEDIUM | CNTR-K8-003110 | PATCH | The Kubernetes component manifests must be owned by root. | Apply root owner"
        ansible.builtin.file:
            path: "{{ item.path }}"
            owner: root
        with_items:
            - "{{ cntr_k8_003110_manifest_files.files }}"
        loop_control:
            label: "{{ item.path }}"
  when:
      - cntr_k8_003110
  tags:
      - CNTR-K8-003110
      - CAT2
      - CCI-000366
      - SRG-APP-000516-CTR-001325
      - SV-242444r712688_rule
      - V-242444
      - permissions

- name: |
    "MEDIUM | CNTR-K8-003120 | PATCH | The Kubernetes component etcd must be owned by etcd."
    "MEDIUM | CNTR-K8-003260 | PATCH | The Kubernetes etcd must have file permissions set to 644 or more restrictive."
  block:
      - name: |
          "MEDIUM | CNTR-K8-003120 | PATCH | The Kubernetes component etcd must be owned by etcd."
          "MEDIUM | CNTR-K8-003260 | PATCH | The Kubernetes etcd must have file permissions set to 644 or more restrictive."
        ansible.builtin.shell: find /var/lib/etcd/ \( ! -group etcd -o ! -user etcd -o -perm /022 \) -type f -exec stat -c "%n" '{}' \;
        changed_when: false
        failed_when: false
        register: cntr_k8_003120_etc_files

      - name: |
          "MEDIUM | CNTR-K8-003120 | PATCH | The Kubernetes component etcd must be owned by etcd."
          "MEDIUM | CNTR-K8-003260 | PATCH | The Kubernetes etcd must have file permissions set to 644 or more restrictive."
        ansible.builtin.shell: find /var/lib/etcd/ \( ! -group etcd -o ! -user etcd -o -perm /022 \) -type d -exec stat -c "%n" '{}' \;
        changed_when: false
        failed_when: false
        register: cntr_k8_003120_etc_directories

      - name: |
          "MEDIUM | CNTR-K8-003120 | PATCH | The Kubernetes component etcd must be owned by etcd. | Set file permissions"
          "MEDIUM | CNTR-K8-003260 | PATCH | The Kubernetes etcd must have file permissions set to 644 or more restrictive. | File file permissions"
        ansible.builtin.file:
            path: "{{ item }}"
            mode: "{{ cntr_k8_003260 | ternary('644',omit) }}"
            owner: "{{ cntr_k8_003120 | ternary('etcd',omit) }}"
            group: "{{ cntr_k8_003120 | ternary('etcd',omit) }}"
        with_items:
            - "{{ cntr_k8_003120_etc_files.stdout_lines }}"
        when: cntr_k8_003120_etc_files.stdout | length >= 1

      - name: |
          "MEDIUM | CNTR-K8-003120 | PATCH | The Kubernetes component etcd must be owned by etcd. | Set dir permissions"
          "MEDIUM | CNTR-K8-003260 | PATCH | The Kubernetes etcd must have file permissions set to 644 or more restrictive. | Set dir permissions"
        ansible.builtin.file:
            path: "{{ item }}"
            mode: "{{ cntr_k8_003260 | ternary('644',omit) }}"
            owner: "{{ cntr_k8_003120 | ternary('etcd',omit) }}"
            group: "{{ cntr_k8_003120 | ternary('etcd',omit) }}"
            state: directory
        with_items:
            - "{{ cntr_k8_003120_etc_directories.stdout_lines }}"
        when: cntr_k8_003120_etc_directories.stdout | length >= 1
  when:
      - cntr_k8_003120 or
        cntr_k8_003260
  tags:
      - CNTR-K8-003120
      - CNTR-K8-003260
      - CAT2
      - CCI-000366
      - SRG-APP-000516-CTR-001325
      - SRG-APP-000516-CTR-001335
      - SV-242445r712691_rule
      - SV-242459r712733_rule
      - V-242445
      - V-242459
      - permissions

- name: |
    "MEDIUM | CNTR-K8-003130 | PATCH | The Kubernetes conf files must be owned by root."
    "MEDIUM | CNTR-K8-003270 | PATCH | The Kubernetes admin.conf must have file permissions set to 644 or more restrictive."
  ansible.builtin.file:
      path: "{{ item }}"
      mode: "{{ cntr_k8_003270 | ternary('644',omit) }}"
      owner: "{{ cntr_k8_003130 | ternary('root',omit) }}"
      group: "{{ cntr_k8_003130 | ternary('root',omit) }}"
  with_items:
      - /etc/kubernetes/admin.conf
      - /etc/kubernetes/scheduler.conf
      - /etc/kubernetes/controller-manager.conf
  when:
      - cntr_k8_003130 or
        cntr_k8_003270
  tags:
      - CNTR-K8-003130
      - CNTR-K8-003270
      - CAT2
      - CCI-000366
      - SRG-APP-000516-CTR-001325
      - SRG-APP-000516-CTR-001335
      - SV-242446r712694_rule
      - SV-242460r712736_rule
      - V-242446
      - V-242460
      - permissions

- name: |
    "MEDIUM | CNTR-K8-003140 | PATCH | The Kubernetes Kube Proxy must have file permissions set to 644 or more restrictive."
    "MEDIUM | CNTR-K8-003150 | PATCH | The Kubernetes Kube Proxy must be owned by root."
  block:
      - name: |
          "MEDIUM | CNTR-K8-003140 | AUDIT | The Kubernetes Kube Proxy must have file permissions set to 644 or more restrictive. | Check config file status"
          "MEDIUM | CNTR-K8-003150 | AUDIT | The Kubernetes Kube Proxy must be owned by root.| Check config file status"
        ansible.builtin.stat:
            path: "{{ proxy_kubeconfig_file }}"
        register: cntr_k8_003140_proxy_config_file_status

      - name: |
          "MEDIUM | CNTR-K8-003140 | PATCH | The Kubernetes Kube Proxy must have file permissions set to 644 or more restrictive. | Set permissions"
          "MEDIUM | CNTR-K8-003150 | PATCH | The Kubernetes Kube Proxy must be owned by root. | Set permissions"
        ansible.builtin.file:
            path: "{{ proxy_kubeconfig_file }}"
            mode: "{{ cntr_k8_003140 | ternary('644',omit) }}"
            owner: "{{ cntr_k8_003150 | ternary('root',omit) }}"
            gropu: "{{ cntr_k8_003150 | ternary('root',omit) }}"
        when: cntr_k8_003140_proxy_config_file_status.stat.exists
  when:
      - cntr_k8_003140 or
        cntr_k8_003150
  tags:
      - CNTR-K8-003140
      - CNTR-K8-003150
      - CAT2
      - CCI-000366
      - SRG-APP-000516-CTR-001325
      - SV-242447r821612_rule
      - SV-242448r712700_rule
      - V-242447
      - V-242448
      - permissions

- name: |
    "MEDIUM | CNTR-K8-003160 | PATCH | The Kubernetes Kubelet certificate authority file must have file permissions set to 644 or more restrictive."
    "MEDIUM | CNTR-K8-003170 | PATCH | The Kubernetes Kubelet certificate authority must be owned by root."
  ansible.builtin.file:
      path: "{{ cntrk8stig_kubeapi_client_ca_file }}"
      mode: "{{ cntr_k8_003160 | ternary('0644',omit) }}"
      owner: "{{ cntr_k8_003170 | ternary('root',omit) }}"
      group: "{{ cntr_k8_003170 | ternary('root',omit) }}"
  when:
      - cntr_k8_003160 or
        cntr_k8_003170
      - kubernetes_master
  tags:
      - CNTR-K8-003160
      - CNTR-K8-003170
      - CAT2
      - CCI-000366
      - SRG-APP-000516-CTR-001325
      - SV-242449r821614_rule
      - SV-242450r754804_rule
      - V-242449
      - V-242450
      - permissions

- name: |
    "MEDIUM | CNTR-K8-003180 | PATCH | The Kubernetes component PKI must be owned by root."
    "MEDIUM | CNTR-K8-003330 | PATCH | The Kubernetes PKI CRT must have file permissions set to 644 or more restrictive."
  block:
      - name: |
          "MEDIUM | CNTR-K8-003180 | AUDIT | The Kubernetes component PKI must be owned by root. | Get files"
          "MEDIUM | CNTR-K8-003330 | AUDIT | The Kubernetes PKI CRT must have file permissions set to 644 or more restrictive. | Get files"
        ansible.builtin.shell: find /etc/kubernetes/pki/ \( ! -group root -o ! -user root -o -perm /022 \) -type f -exec stat -c "%n" '{}' \;
        changed_when: false
        failed_when: false
        register: cntr_k8_003180_pki_files

      - name: |
          "MEDIUM | CNTR-K8-003180 | PATCH | The Kubernetes component PKI must be owned by root. | Set permissions"
          "MEDIUM | CNTR-K8-003330 | PATCH | The Kubernetes PKI CRT must have file permissions set to 644 or more restrictive. | Set permissions"
        ansible.builtin.file:
            path: "{{ item }}"
            mode: "{{ cntr_k8_003330 | ternary('644',omit) }}"
            owner: "{{ cntr_k8_003180 | ternary('root',omit) }}"
            group: "{{ cntr_k8_003180 | ternary('root',omit) }}"
        with_items:
            - "{{ cntr_k8_003180_pki_files.stdout_lines }}"
        when: cntr_k8_003180_pki_files.stdout | length >= 1
  when:
      - cntr_k8_003180 or
        cntr_k8_003330
  tags:
      - CNTR-K8-003180
      - CNTR-K8-003330
      - CAT2
      - CCI-000366
      - SRG-APP-000516-CTR-001325
      - SRG-APP-000516-CTR-001335
      - SV-242451r712709_rule
      - SV-242466r712754_rule
      - V-242451
      - V-242466
      - permissions

- name: |
    "MEDIUM | CNTR-K8-003190 | PATCH | The Kubernetes kubelet config must have file permissions set to 644 or more restrictive."
    "MEDIUM | CNTR-K8-003200 | PATCH | The Kubernetes kubelet config must be owned by root."
  ansible.builtin.file:
      path: /etc/kubernetes/kubelet.conf
      mode: "{{ cntr_k8_003190 | ternary('644',omit) }}"
      owner: "{{ cntr_k8_003200 | ternary('root',omit) }}"
      group: "{{ cntr_k8_003200 | ternary('root',omit) }}"
  when:
      - cntr_k8_003190 or
        cntr_k8_003200
  tags:
      - CNTR-K8-003190
      - CNTR-K8-003200
      - CAT2
      - CCI-000366
      - SRG-APP-000516-CTR-001325
      - SV-242452r821616_rule
      - SV-242453r712715_rule
      - V-242452
      - V-242453
      - permissions

- name: |
    "MEDIUM | CNTR-K8-003210 | PATCH | The Kubernetes kubeadm.conf must be owned by root."
    "MEDIUM | CNTR-K8-003220 | PATCH | The Kubernetes kubeadm.conf must have file permissions set to 644 or more restrictive."
  ansible.builtin.file:
      path: "{{ cntrk8stig_kubelet_service_file }}"
      mode: "{{ cntr_k8_003220 | ternary('644',omit) }}"
      owner: "{{ cntr_k8_003210 | ternary('root',omit) }}"
      group: "{{ cntr_k8_003210 | ternary('root',omit) }}"
  when:
      - cntr_k8_003210 or
        cntr_k8_003220
  tags:
      - CNTR-K8-003210
      - CNTR-K8-003220
      - CAT2
      - CCI-000366
      - SRG-APP-000516-CTR-001325
      - SV-242454r754819_rule
      - SV-242455r754822_rule
      - V-242454
      - V-242455
      - permissions

- name: |
    "MEDIUM | CNTR-K8-003230 | PATCH | The Kubernetes kubelet config must have file permissions set to 644 or more restrictive."
    "MEDIUM | CNTR-K8-003240 | PATCH | The Kubernetes kubelet config must be owned by root."
  ansible.builtin.file:
      path: /var/lib/kubelet/config.yaml
      mode: "{{ cntr_k8_003230 | ternary('644',omit) }}"
      owner: "{{ cntr_k8_003240 | ternary('root',omit) }}"
      group: "{{ cntr_k8_003240 | ternary('root',omit) }}"
  when:
      - cntr_k8_003230 or
        cntr_k8_003240
  tags:
      - CNTR-K8-003230
      - CNTR-K8-003240
      - CAT2
      - CCI-000366
      - SRG-APP-000516-CTR-001330
      - SV-242456r821618_rule
      - SV-242457r712727_rule
      - V-242456
      - V-242457
      - permissions

- name: "MEDIUM | CNTR-K8-003250 | PATCH | The Kubernetes API Server must have file permissions set to 644 or more restrictive."
  block:
      - name: "MEDIUM | CNTR-K8-003250 | AUDIT | The Kubernetes API Server must have file permissions set to 644 or more restrictive. | Get files"
        ansible.builtin.shell: find /etc/kubernetes/manifests/ -perm /022 -type f -exec stat -c "%n" '{}' \;
        changed_when: false
        failed_when: false
        register: cntr_k8_003250_files

      - name: "MEDIUM | CNTR-K8-003250 | PATCH | The Kubernetes API Server must have file permissions set to 644 or more restrictive. | Set permissions"
        ansible.builtin.file:
            path: "{{ item }}"
            mode: 0644
        with_items:
            - "{{ cntr_k8_003250_files.stdout_lines }}"
        when: cntr_k8_003250_files.stdout | length >= 1
  when:
      - cntr_k8_003250
  tags:
      - CNTR-K8-003250
      - CAT2
      - CCI-000366
      - SRG-APP-000516-CTR-001335
      - SV-242458r754806_rule
      - V-242458
      - permissions

- name: "MEDIUM | CNTR-K8-003280 | PATCH | Kubernetes API Server audit logs must be enabled."
  ansible.builtin.lineinfile:
      path: "{{ api_server_pod_specification_file }}"
      regexp: '^(\s+- --audit-policy-file=.*)$'
      line: "    - --audit-policy-file={{ cntrk8stig_kubeapi_audit_policy_file }}"
      insertafter: '^\s+- kube-apiserver'
  when:
      - cntr_k8_003280
      - kubernetes_master
  tags:
      - CNTR-K8-003280
      - CAT2
      - CCI-000366
      - SRG-APP-000516-CTR-001335
      - SV-242461r712739_rule
      - V-242461
      - kube_api_server

- name: "MEDIUM | CNTR-K8-003290 | PATCH | The Kubernetes API Server must be set to audit log max size."
  ansible.builtin.lineinfile:
      path: "{{ api_server_pod_specification_file }}"
      regexp: '^(\s+- --audit-log-maxsize=.*)$'
      line: "    - --audit-log-maxsize={{ cntrk8stig_audit_log_max_size }}"
      insertafter: '^\s+- kube-apiserver'
  when:
      - cntr_k8_003290
      - kubernetes_master
  tags:
      - CNTR-K8-003290
      - CAT2
      - CCI-000366
      - SRG-APP-000516-CTR-001335
      - SV-242462r712742_rule
      - V-242462
      - kube_api_server

- name: "MEDIUM | CNTR-K8-003300 | PATCH | The Kubernetes API Server must be set to audit log maximum backup."
  ansible.builtin.lineinfile:
      path: "{{ api_server_pod_specification_file }}"
      regexp: '^(\s+- --audit-log-maxbackup=.*)$'
      line: "    - --audit-log-maxbackup={{ cntrk8stig_audit_log_maxbackup }}"
      insertafter: '^\s+- kube-apiserver'
  when:
      - cntr_k8_003300
      - kubernetes_master
  tags:
      - CNTR-K8-003300
      - CAT2
      - CCI-000366
      - SRG-APP-000516-CTR-001335
      - SV-242463r712745_rule
      - V-242463
      - kube_api_server

- name: "MEDIUM | CNTR-K8-003310 | PATCH | The Kubernetes API Server audit log retention must be set."
  ansible.builtin.lineinfile:
      path: "{{ api_server_pod_specification_file }}"
      regexp: '^(\s+- --audit-log-maxage=.*)$'
      line: "    - --audit-log-maxage={{ cntrk8stig_audit_log_maxage }}"
      insertafter: '^\s+- kube-apiserver'
  when:
      - cntr_k8_003310
      - kubernetes_master
  tags:
      - CNTR-K8-003310
      - CAT2
      - CCI-000366
      - SRG-APP-000516-CTR-001335
      - SV-242464r754808_rule
      - V-242464
      - kube_api_server

- name: "MEDIUM | CNTR-K8-003320 | PATCH | The Kubernetes API Server audit log path must be set."
  ansible.builtin.lineinfile:
      path: "{{ api_server_pod_specification_file }}"
      regexp: '^(\s+- --audit-log-path=.*)$'
      line: "    - --audit-log-path={{ cntrk8stig_audit_log_path }}"
      insertafter: '^\s+- kube-apiserver'
  when:
      - cntr_k8_003320
      - kubernetes_master
  tags:
      - CNTR-K8-003320
      - CAT2
      - CCI-000366
      - SRG-APP-000516-CTR-001335
      - SV-242465r754810_rule
      - V-242465
      - kube_api_server

- name: "MEDIUM | CNTR-K8-003340 | PATCH | The Kubernetes PKI keys must have file permissions set to 600 or more restrictive."
  block:
      - name: "MEDIUM | CNTR-K8-003340 | PATCH | The Kubernetes PKI keys must have file permissions set to 600 or more restrictive. | Get files"
        ansible.builtin.find:
            path: /etc/kubernetes/pki/
            patterns: '*.key'
        register: cntr_k8_003340_pki_key_files

      - name: "MEDIUM | CNTR-K8-003340 | PATCH | The Kubernetes PKI keys must have file permissions set to 600 or more restrictive. | Set permissions"
        ansible.builtin.file:
            path: "{{ item.path }}"
            mode: 0600
        with_items:
            - "{{ cntr_k8_003340_pki_key_files.files }}"
        loop_control:
            label: "{{ item.path }}"
        when: cntr_k8_003340_pki_key_files.matched >= 1
  when:
      - cntr_k8_003340
  tags:
      - CNTR-K8-003340
      - CAT2
      - CCI-000366
      - SRG-APP-000516-CTR-001335
      - SV-242467r712757_rule
      - V-242467
      - permissions

- name: "MEDIUM | CNTR-K8-003350 | PATCH | The Kubernetes API Server must prohibit communication using TLS version 1.0 and 1.1, and SSL 2.0 and 3.0."
  ansible.builtin.lineinfile:
      path: "{{ api_server_pod_specification_file }}"
      regexp: '^(\s+- --tls-min-version=.*)$'
      line: "    - --tls-min-version={{ cntrk8stig_audit_log_path }}"
      insertafter: '^\s+- kube-apiserver'
  when:
      - cntr_k8_003350
      - kubernetes_master
  tags:
      - CNTR-K8-003350
      - CAT2
      - CCI-001453
      - SRG-APP-000560-CTR-001340
      - SV-242468r712760_rule
      - V-242468
      - kube_api_server
      - not_implemented_yet

- name: "MEDIUM | CNTR-K8-001300 | PATCH | Kubernetes Kubelet must not disable timeouts."
  block:
      - name: "MEDIUM | CNTR-K8-001300 | PATCH | Kubernetes Kubelet must not disable timeouts. | Set if both EXRA_ARGS and streaming connection exist"
        ansible.builtin.replace:
            path: "{{ kubelet_file }}"
            regexp: 'streaming-connection-idle-timeout=([\S])([^"])'
            replace: streaming-connection-idle-timeout={{ cntrk8stig_stream_conn_idle_timeout }}
        notify: kubelet restart
        when:
            - "'KUBELET_EXTRA_ARGS' in cntrk8stig_kubelet_extra_args"
            - "'streaming-connection-idle-timeout' in cntrk8stig_kubelet_extra_args"

      - name: "MEDIUM | CNTR-K8-001300 | PATCH | Kubernetes Kubelet must not disable timeouts. | Set if EXRA_ARGS exist and not streaming connection"
        ansible.builtin.replace:
            path: "{{ kubelet_file }}"
            regexp: 'KUBELET_EXTRA_ARGS='
            replace: 'KUBELET_EXTRA_ARGS=--streaming-connection-idle-timeout={{ cntrk8stig_stream_conn_idle_timeout }} '
        notify: kubelet restart
        when:
            - "'KUBELET_EXTRA_ARGS' in cntrk8stig_kubelet_extra_args"
            - "'streaming-connection-idle-timeout' not in cntrk8stig_kubelet_extra_args"

      - name: "MEDIUM | CNTR-K8-001300 | PATCH | Kubernetes Kubelet must not disable timeouts. | Set if EXRA_ARGS don't exist for non-systemd configs"
        ansible.builtin.lineinfile:
            path: "{{ kubelet_file }}"
            line: 'KUBELET_EXTRA_ARGS=--streaming-connection-idle-timeout={{ cntrk8stig_stream_conn_idle_timeout }}'
        notify: kubelet restart
        when:
            - "'KUBELET_EXTRA_ARGS' not in cntrk8stig_kubelet_extra_args"
            - "'/etc/systemd/system/kubelet.service.d' not in kubelet_file"

      - name: "MEDIUM | CNTR-K8-001300 | PATCH | Kubernetes Kubelet must not disable timeouts. | Set if EXRA_ARGS don't exist for systemd configs"
        ansible.builtin.lineinfile:
            path: "{{ kubelet_file }}"
            line: 'Environment="KUBELET_EXTRA_ARGS=--streaming-connection-idle-timeout={{ cntrk8stig_stream_conn_idle_timeout }}"'
            insertafter: '\[Service\]'
        notify: kubelet restart
        when:
            - "'KUBELET_EXTRA_ARGS' not in cntrk8stig_kubelet_extra_args"
            - "'/etc/systemd/system/kubelet.service.d' in kubelet_file"
  when:
      - cntr_k8_001300
      - kubernetes_master
  tags:
      - CNTR-K8-001300
      - CAT2
      - CCI-001133
      - SRG-APP-000190-CTR-000500
      - SV-245541r821621_rule
      - V-245541
      - kubelet
      - not_implemented_yet

- name: "MEDIUM | CNTR-K8-002630 | PATCH | Kubernetes API Server must disable token authentication to protect information in transit."
  ansible.builtin.lineinfile:
      path: "{{ api_server_pod_specification_file }}"
      regexp: '^(\s+- --token-auth-file=.*)$'
      state: absent
  when:
      - cntr_k8_002630
      - kubernetes_master
  tags:
      - CNTR-K8-002630
      - CAT2
      - CCI-002418
      - SRG-APP-000439-CTR-001080
      - SV-245543r754894_rule
      - V-245543

- name: "MEDIUM | CNTR-K8-002640 | PATCH | Kubernetes endpoints must use approved organizational certificate and key pair to protect information in transit"
  ansible.builtin.lineinfile:
      path: "{{ api_server_pod_specification_file }}"
      regexp: "{{ item.regexp }}"
      line: "{{ item.line }}"
      insertafter: '^\s+- kube-apiserver'
  with_items:
      - { regexp: '^(\s+- --kubelet-client-certificate=.*)$', line: "    - --kubelet-client-certificate={{ cntrk8stig_client_cert }}" }
      - { regexp: '^(\s+- --kubelet-client-key=.*)$', line: "    - --kubelet-client-key={{ cntrk8stig_client_key }}" }
  loop_control:
      label: "{{ item.line }}"
  when:
      - cntr_k8_002640
      - kubernetes_master
  tags:
      - CNTR-K8-002640
      - CAT2
      - CCI-002418
      - SRG-APP-000439-CTR-001080
      - SV-245544r754897_rule
      - V-245544
      - kube_api_server
      - not_implemented_yet
